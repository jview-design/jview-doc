import{_ as t,o as e,c as a,Q as o}from"./chunks/framework.bf0d9ef3.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pkgs/hooks.md","filePath":"pkgs/hooks.md","lastUpdated":1707214740000}'),s={name:"pkgs/hooks.md"},r=o('<p><a href="./">Home</a> &gt; <a href="./hooks.html">@jview/hooks</a></p><h2 id="hooks-package" tabindex="-1">hooks package <a class="header-anchor" href="#hooks-package" aria-label="Permalink to &quot;hooks package&quot;">​</a></h2><p><code>@jview/hooks</code>封装了 JView UI 产品中常用的一些 Hooks，当然也不仅限于 JView UI 产品中使用。</p><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><a href="./hooks.useasyncloading.html">useAsyncLoading(fn)</a></td><td>你是否为一些异步状态的管理感到烦恼？如果答案是肯定的，那么 useAsyncLoading 一定是一剂良药。 useAsyncLoading 会包装函数 fn，并返回触发器和一些状态量，你可以通过触发器 trigger 来触发函数 fn 的执行，通过状态量 loading 来感知加载状态，这个 loading 可以绑定到按钮属性上，也可以作为一些判定的条件。 注意，fn 通常是异步的，比如返回一个 Promise，那么在 loading 状态下，再次调用 trigger 也不会重复触发 fn 的执行，这一点与 Button 组件的 loading 也有异曲同工之妙。</td></tr><tr><td><a href="./hooks.useelementcontentrect.html">useElementContentRect(options)</a></td><td>封装了计算 dom ContentRect 的 hook</td></tr><tr><td><a href="./hooks.usepickedprops.html">usePickedProps(props, keys)</a></td><td>从组件的 props 中挑选出部分属性，通常用于一些透传场景</td></tr><tr><td><a href="./hooks.useresizeobserver.html">useResizeObserver(options)</a></td><td>ResizeObserver hook，封装了一些便捷的逻辑</td></tr></tbody></table><h2 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-label="Permalink to &quot;Interfaces&quot;">​</a></h2><table><thead><tr><th>Interface</th><th>Description</th></tr></thead><tbody><tr><td><a href="./hooks.asyncloadingresponse.html">AsyncLoadingResponse</a></td><td>useAsyncLoading 的返回类型</td></tr><tr><td><a href="./hooks.useelementcontentrectoption.html">UseElementContentRectOption</a></td><td>useElementContentRect 选项</td></tr><tr><td><a href="./hooks.useresizeobserveroption.html">UseResizeObserverOption</a></td><td>useResizeObserver 的入参类型</td></tr></tbody></table><h2 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h2><table><thead><tr><th>Variable</th><th>Description</th></tr></thead><tbody><tr><td><a href="./hooks.usewindowresize.html">useWindowResize</a></td><td></td></tr></tbody></table><h2 id="type-aliases" tabindex="-1">Type Aliases <a class="header-anchor" href="#type-aliases" aria-label="Permalink to &quot;Type Aliases&quot;">​</a></h2><table><thead><tr><th>Type Alias</th><th>Description</th></tr></thead><tbody><tr><td><a href="./hooks.domrectdata.html">DOMRectData</a></td><td>DOMRect</td></tr><tr><td><a href="./hooks.usewindowresizeoption.html">UseWindowResizeOption</a></td><td></td></tr></tbody></table>',11),d=[r];function n(h,i,l,c,p,k){return e(),a("div",null,d)}const f=t(s,[["render",n]]);export{b as __pageData,f as default};
