import{_ as e,o as t,c as a,Q as o}from"./chunks/framework.bf0d9ef3.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pkgs/index.md","filePath":"pkgs/index.md","lastUpdated":1699373669000}'),r={name:"pkgs/index.md"},d=o('<p><a href="./">Home</a></p><h2 id="api-reference" tabindex="-1">API Reference <a class="header-anchor" href="#api-reference" aria-label="Permalink to &quot;API Reference&quot;">​</a></h2><h2 id="packages" tabindex="-1">Packages <a class="header-anchor" href="#packages" aria-label="Permalink to &quot;Packages&quot;">​</a></h2><table><thead><tr><th>Package</th><th>Description</th></tr></thead><tbody><tr><td><a href="./hooks.html">@jview/hooks</a></td><td><code>@jview/hooks</code>封装了 JView UI 产品中常用的一些 Hooks，当然也不仅限于 JView UI 产品中使用。</td></tr><tr><td><a href="./types.html">@jview/types</a></td><td><code>@jview/types</code>是一些基本的类型定义，主要服务于 JView 生态。</td></tr><tr><td><a href="./utils.html">@jview/utils</a></td><td><code>@jview/utils</code>封装了 JView UI 产品中常用的一些工具函数。这些工具函数也不仅限于 JView UI 产品中使用。</td></tr></tbody></table>',4),s=[d];function i(c,n,h,_,l,p){return t(),a("div",null,s)}const m=e(r,[["render",i]]);export{k as __pageData,m as default};
