import{_ as s,o as n,c as a,Q as o}from"./chunks/framework.bf0d9ef3.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pkgs/hooks.useasyncloading.md","filePath":"pkgs/hooks.useasyncloading.md","lastUpdated":1699501631000}'),e={name:"pkgs/hooks.useasyncloading.md"},t=o('<p><a href="./">Home</a> &gt; <a href="./hooks.html">@jview/hooks</a> &gt; <a href="./hooks.useasyncloading.html">useAsyncLoading</a></p><h2 id="useasyncloading-function" tabindex="-1">useAsyncLoading() function <a class="header-anchor" href="#useasyncloading-function" aria-label="Permalink to &quot;useAsyncLoading() function&quot;">​</a></h2><p>你是否为一些异步状态的管理感到烦恼？如果答案是肯定的，那么 useAsyncLoading 一定是一剂良药。 useAsyncLoading 会包装函数 fn，并返回触发器和一些状态量，你可以通过触发器 trigger 来触发函数 fn 的执行，通过状态量 loading 来感知加载状态，这个 loading 可以绑定到按钮属性上，也可以作为一些判定的条件。 注意，fn 通常是异步的，比如返回一个 Promise，那么在 loading 状态下，再次调用 trigger 也不会重复触发 fn 的执行，这一点与 Button 组件的 loading 也有异曲同工之妙。</p><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useAsyncLoading</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">fn</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GeneralFunction</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">unknown</span><span style="color:#E1E4E8;">&gt;&gt;)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncLoadingResponse</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useAsyncLoading</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GeneralFunction</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">unknown</span><span style="color:#24292E;">&gt;&gt;)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncLoadingResponse</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>fn</td><td><a href="./types.generalfunction.html">GeneralFunction</a>&lt;Promise&lt;unknown&gt;&gt;</td><td>待包装的函数，它应该返回一个 Promise</td></tr></tbody></table><p><strong>Returns:</strong></p><p><a href="./hooks.asyncloadingresponse.html">AsyncLoadingResponse</a></p>',9),l=[t];function p(r,c,i,d,y,g){return n(),a("div",null,l)}const E=s(e,[["render",p]]);export{u as __pageData,E as default};
