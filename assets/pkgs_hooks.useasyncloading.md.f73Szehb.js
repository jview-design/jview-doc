import{_ as s,c as a,o as i,ax as t}from"./chunks/framework.DSrT5G2K.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pkgs/hooks.useasyncloading.md","filePath":"pkgs/hooks.useasyncloading.md","lastUpdated":1752224702000}'),n={name:"pkgs/hooks.useasyncloading.md"},e=t('<p><a href="./">Home</a> &gt; <a href="./hooks.html">@jview/hooks</a> &gt; <a href="./hooks.useasyncloading.html">useAsyncLoading</a></p><h2 id="useasyncloading-function" tabindex="-1">useAsyncLoading() function <a class="header-anchor" href="#useasyncloading-function" aria-label="Permalink to &quot;useAsyncLoading() function&quot;">​</a></h2><p>你是否为一些异步状态的管理感到烦恼？如果答案是肯定的，那么 useAsyncLoading 一定是一剂良药。 useAsyncLoading 会包装函数 fn，并返回触发器和一些状态量，你可以通过触发器 trigger 来触发函数 fn 的执行，通过状态量 loading 来感知加载状态，这个 loading 可以绑定到按钮属性上，也可以作为一些判定的条件。 注意，fn 通常是异步的，比如返回一个 Promise，那么在 loading 状态下，再次调用 trigger 也不会重复触发 fn 的执行，这一点与 Button 组件的 loading 也有异曲同工之妙。</p><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useAsyncLoading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GeneralFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AsyncLoadingResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th><p>Parameter</p></th><th><p>Type</p></th><th><p>Description</p></th></tr></thead><tbody><tr><td><p>fn</p></td><td><p><a href="./types.generalfunction.html">GeneralFunction</a>&lt;Promise&lt;unknown&gt;&gt;</p></td><td><p>待包装的函数，它应该返回一个 Promise</p></td></tr></tbody></table><p><strong>Returns:</strong></p><p><a href="./hooks.asyncloadingresponse.html">AsyncLoadingResponse</a></p>',9),o=[e];function r(h,p,l,d,k,c){return i(),a("div",null,o)}const y=s(n,[["render",r]]);export{u as __pageData,y as default};
