import{_ as t,o as d,c as e,Q as o}from"./chunks/framework.c15ea7b3.js";const b=JSON.parse('{"title":"ProForm","description":"","frontmatter":{"title":"ProForm"},"headers":[],"relativePath":"pro-components/pro-form/index.md","filePath":"pro-components/pro-form/index.md","lastUpdated":1686313545000}'),r={name:"pro-components/pro-form/index.md"},c=o('<p>ProForm —— Vue3 表单解决方案。</p><h2 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h2><p>ProForm 旨在简化表单的使用，内置了常见的表单组件类型，您只需要通过设置<code>valueType</code>属性，即可轻松使用诸多表单组件。</p><h2 id="扩展-裁剪" tabindex="-1">扩展 !== 裁剪 <a class="header-anchor" href="#扩展-裁剪" aria-label="Permalink to &quot;扩展 !== 裁剪&quot;">​</a></h2><p>原则：封装的目的是扩展组件原有功能，在封装过程中切忌抹杀掉组件的本身能力。</p><p>因此，我们同样支持各个表单组件本身的属性/事件/插槽，你完全不用担心因为用了 ProForm 而丢失部分原有能力。</p><h2 id="自定义渲染" tabindex="-1">自定义渲染 <a class="header-anchor" href="#自定义渲染" aria-label="Permalink to &quot;自定义渲染&quot;">​</a></h2><h2 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h2><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th><th>必填</th></tr></thead><tbody><tr><td>options</td><td>传递一些附带配置，可以持续扩展</td><td><code>ProFormOptions</code></td><td>无</td><td>否</td></tr><tr><td>writeBackForm</td><td>用来回写表单的数据对象</td><td><code>PlainObject</code></td><td>无</td><td>否</td></tr><tr><td>formItems</td><td>由N个表单项配置组成的数组</td><td><code>Array&lt;ProFormItem&gt;</code></td><td>无</td><td>否</td></tr><tr><td>labelWidth</td><td>提供统一的 label 宽度，视觉效果更统一</td><td><code>string</code></td><td>无</td><td>否</td></tr><tr><td>useButtons</td><td>是否使用底部表单按钮，如果不使用，您也可以选择自行渲染</td><td><code>boolean</code></td><td><code>true</code></td><td>否</td></tr><tr><td>onSubmit</td><td>表单提交时触发的函数，需要返回 Promise，或者用 async 函数</td><td><code>GeneralFunction&lt;unknown&gt;</code></td><td>无</td><td>否</td></tr><tr><td>cancelText</td><td>取消按钮文案</td><td><code>string</code></td><td><code>&#39;取消&#39;</code></td><td>否</td></tr><tr><td>hideCancel</td><td>是否隐藏取消按钮</td><td><code>boolean</code></td><td><code>false</code></td><td>否</td></tr><tr><td>submitText</td><td>提交按钮文案</td><td><code>string</code></td><td><code>&#39;保存&#39;</code></td><td>否</td></tr><tr><td>useGrid</td><td>是否采用栅格布局，仅在 layout=inline 时有效</td><td><code>boolean</code></td><td><code>true</code></td><td>否</td></tr><tr><td>fixedCol</td><td>固定栅格，会让 isResponsive 失效</td><td><code>string</code> | <code>number</code> | <code>false</code></td><td><code>false</code></td><td>否</td></tr><tr><td>isResponsive</td><td>是否响应式计算栅格，前提是 useGrid</td><td><code>boolean</code></td><td><code>true</code></td><td>否</td></tr><tr><td>rowProps</td><td>配置栅格布局对应的Row组件的props</td><td><code>PlainObject</code></td><td>无</td><td>否</td></tr><tr><td>disabled</td><td>表单整体禁用的控制属性</td><td><code>boolean</code></td><td><code>false</code></td><td>否</td></tr><tr><td>sorted</td><td>是否已经排过序，避免重复排序</td><td><code>boolean</code></td><td><code>false</code></td><td>否</td></tr><tr><td>antFormRef</td><td>支持指定 ant-form ref，方便操作 a-form，但是不要滥用，否则可能与 ProForm 本身预设的行为不一致</td><td><code>Ref&lt;any&gt;</code></td><td>无</td><td>否</td></tr><tr><td>autoFill</td><td>表单项内容是否自动填充剩余区域</td><td><code>boolean</code></td><td><code>true</code></td><td>否</td></tr><tr><td>enablePatch</td><td>如果启用，还可以配合隐藏域传其他字段，TODO: 还需要重新考虑一下设计</td><td><code>boolean</code></td><td><code>false</code></td><td>否</td></tr><tr><td>hiddenFields</td><td>隐藏域字段列表</td><td><code>Array&lt;string&gt;</code></td><td>无</td><td>否</td></tr></tbody></table>',9),a=[c];function n(l,s,i,h,m,p){return d(),e("div",null,a)}const f=t(r,[["render",n]]);export{b as __pageData,f as default};
