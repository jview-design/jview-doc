import{_ as e,o as a,c as t,Q as n}from"./chunks/framework.c15ea7b3.js";const y=JSON.parse('{"title":"async","description":"","frontmatter":{"title":"async"},"headers":[],"relativePath":"hooks/async/index.md","filePath":"hooks/async/index.md","lastUpdated":1698907388000}'),o={name:"hooks/async/index.md"},s=n('<h1 id="module-async" tabindex="-1">Module: async <a class="header-anchor" href="#module-async" aria-label="Permalink to &quot;Module: async&quot;">​</a></h1><h2 id="table-of-contents" tabindex="-1">Table of contents <a class="header-anchor" href="#table-of-contents" aria-label="Permalink to &quot;Table of contents&quot;">​</a></h2><h3 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-label="Permalink to &quot;Interfaces&quot;">​</a></h3><ul><li><a href="/hooks/async/interfaces/AsyncLoadingResponse.html">AsyncLoadingResponse</a></li></ul><h3 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h3><ul><li><a href="#useasyncloading">useAsyncLoading</a></li></ul><h2 id="functions-1" tabindex="-1">Functions <a class="header-anchor" href="#functions-1" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><h3 id="useasyncloading" tabindex="-1">useAsyncLoading <a class="header-anchor" href="#useasyncloading" aria-label="Permalink to &quot;useAsyncLoading&quot;">​</a></h3><p>▸ <strong>useAsyncLoading</strong>(<code>fn</code>): <a href="/hooks/async/interfaces/AsyncLoadingResponse.html"><code>AsyncLoadingResponse</code></a></p><p>你是否为一些异步状态的管理感到烦恼？如果答案是肯定的，那么 useAsyncLoading 一定是一剂良药。 useAsyncLoading 会包装函数 fn，并返回触发器和一些状态量，你可以通过触发器 trigger 来触发函数 fn 的执行，通过状态量 loading 来感知加载状态，这个 loading 可以绑定到按钮属性上，也可以作为一些判定的条件。 注意，fn 通常是异步的，比如返回一个 Promise，那么在 loading 状态下，再次调用 trigger 也不会重复触发 fn 的执行，这一点与 Button 组件的 loading 也有异曲同工之妙。</p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>fn</code></td><td style="text-align:left;"><code>GeneralFunction</code>&lt;<code>Promise</code>&lt;<code>unknown</code>&gt;&gt;</td><td style="text-align:left;">待包装的函数，它应该返回一个 Promise</td></tr></tbody></table><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="/hooks/async/interfaces/AsyncLoadingResponse.html"><code>AsyncLoadingResponse</code></a></p><p>Defined in <a href="https://github.com/jview-design/jview/blob/dfe9002/packages/hooks/src/async.ts#L32" target="_blank" rel="noreferrer">packages/hooks/src/async.ts:32</a></p>',15),r=[s];function i(c,l,d,h,u,f){return a(),t("div",null,r)}const p=e(o,[["render",i]]);export{y as __pageData,p as default};
